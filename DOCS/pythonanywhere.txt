> Criar um database e guardar os nomes(username, host-address e db)
> Iniciar um console do tipo Bash
git clone repo.git
cd repo
virtualenv --python=python3.x nome-do-env
source nome-do-env/bin/activate
pip install django
pip install -r requirements.txt
mysql -u username -h host-address 'username$db-name'  < script.sql
(ex.: mysql -u boramarcaralgo -h boramarcaralgo.mysql.pythonanywhere-services.com 'boramarcaralgo$melhorqueofb' < melhorqueofb.sql)
python manage.py collectstatic
(Precisa executar o collectstatic sempre que houve mudança dos static)

(Web-app configurations):
*Criar como manual configuration nos frameworks
Em Code:
    Source code: /home/username/repo
    Working directory: /home/username
    WSGI configuration file:
    {
        > Descomentar a parte referente a django, de acordo com as instruções do arquivo
        path = '/home/username/repo'
        os.environ['DJANGO_SETTINGS_MODULE'] = 'repo.settings'
        > substituir "application = get_wsgi_application()" por:
            from whitenoise.django import DjangoWhiteNoise
            application = DjangoWhiteNoise(get_wsgi_application())
    }
Em Virtualenv:
    /home/username/repo/nome-do-env/


** Resets:
Apagar o virtualenv (bash console) = rm -rf nome-do-env (de dentro da pasta do repo)
Apagar o repo (bash console) = rm -rf repo (de fora da pasta do repo)
Apagar o database (username$default mysql console) :
{
    use username$db-name
    drop database username$db-name; (com o ;)
}
